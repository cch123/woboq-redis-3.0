<def f='redis/src/lzf_c.c' l='98' ll='294' type='unsigned int lzf_compress(const void *const in_data, unsigned int in_len, void * out_data, unsigned int out_len)'/>
<doc f='redis/src/lzf_c.c' l='89'>/*
 * compressed format
 *
 * 000LLLLL &lt;L+1&gt;    ; literal
 * LLLooooo oooooooo ; backref L
 * 111ooooo LLLLLLLL oooooooo ; backref L+7
 *
 */</doc>
<dec f='redis/src/lzf.h' l='77' type='unsigned int lzf_compress(const void *const in_data, unsigned int in_len, void * out_data, unsigned int out_len)'/>
<use f='redis/src/rdb.c' l='222' u='c' c='rdbSaveLzfStringObject'/>
<doc f='redis/src/lzf.h' l='51'>/*
 * Compress in_len bytes stored at the memory block starting at
 * in_data and write the result to out_data, up to a maximum length
 * of out_len bytes.
 *
 * If the output buffer is not large enough or any error occurs return 0,
 * otherwise return the number of bytes used, which might be considerably
 * more than in_len (but less than 104% of the original size), so it
 * makes sense to always use out_len == in_len - 1), to ensure _some_
 * compression, and store the data uncompressed otherwise (with a flag, of
 * course.
 *
 * lzf_compress might use different algorithms on different systems and
 * even different runs, thus might result in different compressed strings
 * depending on the phase of the moon or similar factors. However, all
 * these strings are architecture-independent and will result in the
 * original data when decompressed using lzf_decompress.
 *
 * The buffers must not be overlapping.
 *
 * If the option LZF_STATE_ARG is enabled, an extra argument must be
 * supplied which is not reflected in this header file. Refer to lzfP.h
 * and lzf_c.c.
 *
 */</doc>
