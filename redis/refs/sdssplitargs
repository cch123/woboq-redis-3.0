<dec f='redis/deps/hiredis/sds.h' l='91' type='sds * sdssplitargs(const char * line, int * argc)'/>
<def f='redis/deps/hiredis/sds.c' l='819' ll='927' type='sds * sdssplitargs(const char * line, int * argc)'/>
<doc f='redis/deps/hiredis/sds.c' l='800'>/* Split a line into arguments, where every argument can be in the
 * following programming-language REPL-alike form:
 *
 * foo bar &quot;newline are supported\n&quot; and &quot;\xff\x00otherstuff&quot;
 *
 * The number of arguments is stored into *argc, and an array
 * of sds is returned.
 *
 * The caller should free the resulting array of sds strings with
 * sdsfreesplitres().
 *
 * Note that sdscatrepr() is able to convert back a string into
 * a quoted string in the same format sdssplitargs() is able to parse.
 *
 * The function returns the allocated tokens on success, even when the
 * input string is empty, or NULL if the input contains unbalanced
 * quotes or closed quotes followed by non space characters
 * as in: &quot;foo&quot;bar or &quot;foo&apos;
 */</doc>
<dec f='redis/src/sds.h' l='91' type='sds * sdssplitargs(const char * line, int * argc)'/>
<use f='redis/src/cluster.c' l='135' u='c' c='clusterLoadConfig'/>
<use f='redis/src/config.c' l='101' u='c' c='loadServerConfigFromString'/>
<use f='redis/src/config.c' l='1346' u='c' c='rewriteConfigReadOldFile'/>
<use f='redis/src/networking.c' l='938' u='c' c='processInlineBuffer'/>
<use f='redis/src/redis-cli.c' l='236' u='c' c='cliInitHelp'/>
<use f='redis/src/redis-cli.c' l='987' u='c' c='repl'/>
<def f='redis/src/sds.c' l='819' ll='927' type='sds * sdssplitargs(const char * line, int * argc)'/>
<doc f='redis/src/sds.c' l='800'>/* Split a line into arguments, where every argument can be in the
 * following programming-language REPL-alike form:
 *
 * foo bar &quot;newline are supported\n&quot; and &quot;\xff\x00otherstuff&quot;
 *
 * The number of arguments is stored into *argc, and an array
 * of sds is returned.
 *
 * The caller should free the resulting array of sds strings with
 * sdsfreesplitres().
 *
 * Note that sdscatrepr() is able to convert back a string into
 * a quoted string in the same format sdssplitargs() is able to parse.
 *
 * The function returns the allocated tokens on success, even when the
 * input string is empty, or NULL if the input contains unbalanced
 * quotes or closed quotes followed by non space characters
 * as in: &quot;foo&quot;bar or &quot;foo&apos;
 */</doc>
