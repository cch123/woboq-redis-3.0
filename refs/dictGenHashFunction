<dec f='redis/deps/hiredis/dict.h' l='114' type='unsigned int dictGenHashFunction(const unsigned char * buf, int len)'/>
<def f='redis/deps/hiredis/dict.c' l='53' ll='59' type='unsigned int dictGenHashFunction(const unsigned char * buf, int len)'/>
<use f='redis/deps/hiredis/async.c' l='65' u='c' c='callbackHash'/>
<doc f='redis/deps/hiredis/dict.c' l='51'>/* Generic hash function (a popular one from Bernstein).
 * I tested a few and this was the best. */</doc>
<doc f='redis/deps/hiredis/dict.h' l='113'>/* API */</doc>
<dec f='redis/src/dict.h' l='169' type='unsigned int dictGenHashFunction(const void * key, int len)'/>
<def f='redis/src/dict.c' l='103' ll='144' type='unsigned int dictGenHashFunction(const void * key, int len)'/>
<doc f='redis/src/dict.c' l='92'>/* MurmurHash2, by Austin Appleby
 * Note - This code makes a few assumptions about how your machine behaves -
 * 1. We can read a 4-byte value from any address without crashing
 * 2. sizeof(int) == 4
 *
 * And it has a few limitations -
 *
 * 1. It will not work incrementally.
 * 2. It will not produce the same results on little-endian and big-endian
 *    machines.
 */</doc>
<use f='redis/src/latency.c' l='45' u='c' c='dictStringHash'/>
<use f='redis/src/redis.c' l='472' u='c' c='dictObjHash'/>
<use f='redis/src/redis.c' l='476' u='c' c='dictSdsHash'/>
<use f='redis/src/redis.c' l='505' u='c' c='dictEncObjHash'/>
<use f='redis/src/redis.c' l='512' u='c' c='dictEncObjHash'/>
<use f='redis/src/redis.c' l='517' u='c' c='dictEncObjHash'/>
