<dec f='redis/deps/hiredis/sds.h' l='82' type='void sdsupdatelen(sds s)'/>
<def f='redis/deps/hiredis/sds.c' l='105' ll='110' type='void sdsupdatelen(sds s)'/>
<doc f='redis/deps/hiredis/sds.c' l='91'>/* Set the sds string length to the length as obtained with strlen(), so
 * considering as content only up to the first null term character.
 *
 * This function is useful when the sds string is hacked manually in some
 * way, like in the following example:
 *
 * s = sdsnew(&quot;foobar&quot;);
 * s[2] = &apos;\0&apos;;
 * sdsupdatelen(s);
 * printf(&quot;%d\n&quot;, sdslen(s));
 *
 * The output will be &quot;2&quot;, but if we comment out the call to sdsupdatelen()
 * the output will be &quot;6&quot; as the string was modified but the logical length
 * remains 6 bytes. */</doc>
<dec f='redis/src/sds.h' l='82' type='void sdsupdatelen(sds s)'/>
<def f='redis/src/sds.c' l='105' ll='110' type='void sdsupdatelen(sds s)'/>
<doc f='redis/src/sds.c' l='91'>/* Set the sds string length to the length as obtained with strlen(), so
 * considering as content only up to the first null term character.
 *
 * This function is useful when the sds string is hacked manually in some
 * way, like in the following example:
 *
 * s = sdsnew(&quot;foobar&quot;);
 * s[2] = &apos;\0&apos;;
 * sdsupdatelen(s);
 * printf(&quot;%d\n&quot;, sdslen(s));
 *
 * The output will be &quot;2&quot;, but if we comment out the call to sdsupdatelen()
 * the output will be &quot;6&quot; as the string was modified but the logical length
 * remains 6 bytes. */</doc>
